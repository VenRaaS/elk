input {
	file {
		path => "/tmp/all_CoOc_dump.tsv"
		start_position => "beginning"
		
		# set type in @metadata without pass it to destination
		# @metadata - https://www.elastic.co/guide/en/logstash/5.6/event-dependent-configuration.html#metadata
		add_field => { "[@metadata][type]" => "cooc_i2i" }
	}

	file {
		path => "/tmp/all_Content_dump.tsv"
		start_position => "beginning"
		add_field => { "[@metadata][type]" => "content_i2i" }
	}

	file {
		path => "/tmp/all_CoOc_pn_dump.tsv"
		start_position => "beginning"
		add_field => { "[@metadata][type]" => "cooc_pn" }
	}

	file {
		path => "/tmp/all_TP_dump.tsv"
		start_position => "beginning"
		add_field => { "[@metadata][type]" => "tp" }
	}

	file {
		path => "/tmp/all_VIG_dump.tsv"
		start_position => "beginning"
		add_field => { "[@metadata][type]" => "vig" }
	}

	file {
		path => "/tmp/gcf.tsv"
		start_position => "beginning"
		add_field => { "[@metadata][type]" => "goods_category_flatten" }
	}

	file {
		path => "/tmp/breadcrumb.tsv"
		start_position => "beginning"
		add_field => { "[@metadata][type]" => "breadcrumb" }
	}
}

filter {
	#-- if statement with regex, https://discuss.elastic.co/t/logstash-if-statement-with-regex-example/75706
	if [@metadata][type] =~ /_i2i$/ or 
           [@metadata][type] == "cooc_pn" 
	{
		csv {
			columns => [ "code_name", "gid", "indicators", "indicators_raw", "params", "update_dt" ]
			separator => "	"
			skip_empty_columns => true
		}

		mutate {
			remove_field => [ "indicators" ]
		}
	}

	if [@metadata][type] == "tp" {
		csv {
			columns => [ "code_name", "category_code", "indicators", "indicators_raw", "params", "update_dt" ]
			separator => "	"
			skip_empty_columns => true
		}

		mutate {
			remove_field => [ "indicators" ]
		}
	}

	if [@metadata][type] == "vig" {
		csv {
			columns => [ "code_name", "gid", "score", "params", "update_dt" ]
			separator => "	"
			skip_empty_columns => true
		}
	}

	if [@metadata][type] == "goods_category_flatten" {
		csv {
			columns => [ "code_name", "gid", "category_code", "le", "update_dt" ]
			separator => "	"
			skip_empty_columns => true
		}
	}

	if [@metadata][type] == "breadcrumb" {
		csv {
			columns => [ "code_name", "gid", "breadcrumb", "update_dt" ]
			separator => "	"
			skip_empty_columns => true
		}
	}
	
	#-- drop event if date format is invalid due to time-based index
        #   https://www.elastic.co/guide/en/logstash/current/plugins-filters-date.html#plugins-filters-date-tag_on_failure 
	date {
		match => [ "update_dt", "yyyy-MM-dd HH:mm:ss", "yyyy-MM-dd'T'HH:mm:ss" ]
	}
	if "_dateparsefailure" in [tags] {
		drop {}
	}

	ruby {
		#-- set index suffix with update date 
		#   event API - https://www.elastic.co/guide/en/logstash/5.6/event-api.html#_event_api 
		code => 'event.set("[@metadata][date]", event.get("update_dt")[0..9])'
	}

	ruby {
		#-- extract datetime only
		code => 'event.set("[update_dt]", event.get("update_dt")[0..18])'
	}

	ruby {
		code => "event.set('[@metadata][code_name]', event.get('code_name'))"
	}
	
	mutate {
		remove_field => [ "code_name" ]
	}

	mutate {
		remove_field => [ "message", "host", "path", "@version", "@timestamp", "file", "offset" ]
	}
}

output {
	elasticsearch {
		hosts => ["elk-v563:9200"]
		index => "%{[@metadata][code_name]}_mod_%{[@metadata][date]}"
		document_type => "%{[@metadata][type]}"
	}

#	stdout { 
#		codec => rubydebug 
#		codec => json 
#	}

}

