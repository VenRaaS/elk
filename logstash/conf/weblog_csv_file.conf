input {
    file {
        path => "/tmp/WebLog*.csv"
#        path => "/tmp/weblog.csv"
        start_position => "beginning"
        sincedb_path => "/tmp/sincedb_weblog_daily"

        codec => plain {
            charset => "ISO-8859-1"
        }

        add_field => {
            "[@metadata][code_name]" => "momo" 
            "[@metadata][type]" => "OnlinePref" 
        }
    }
}


filter {
    #-- escape default quote_char, i.e. " if json value, see https://www.elastic.co/guide/en/logstash/5.6/plugins-filters-csv.html#plugins-filters-csv-quote_char
    mutate {
        gsub => ["message", "\"", "'"]
    }

    csv {
        columns => ["user", "page_type", "action", "c_host", "tophost", "url", "para", "referer_url", "l_code", "i_code", "cooid", "recomdf", "cc_session", "cc_guid", "ip", "country", "u_agent", "browser", "device", "timenow", "shbutton", "rating", "geolon", "geolat", "webnumber", "optobj", "area"]
    }
    
    #-- uid
    if [user] {
        grok {
            match => { "user" => "%{USER:uid}" }
        }
    }

    if [action] !~ /\S+/ {
        mutate {
            update => { "[action]" => "pageload" }
        }
    } 

    mutate {
        rename => {
            "i_code" => "gid" 
            "cc_guid" => "ven_guid"
            "cc_session" => "ven_session"
            "timenow" => "insert_dt"
            "ip" => "client_ip"
            "url" => "uri"
        }
    }

    if ! [insert_dt] { drop{} }

    if [insert_dt] {
        grok {
            match => { "[insert_dt]" => "%{YEAR:yyyy}-%{MONTHNUM:MM}-%{MONTHDAY:dd}" }
            add_field => { "[@metadata][date]" => "%{yyyy}%{MM}%{dd}" }
        }
        mutate {
            remove_field => [ "yyyy", "MM", "dd" ]
        }
    }

    #-- category code
    if [l_code] {
        # see https://www.elastic.co/guide/en/logstash/5.6/plugins-filters-grok.html#_regular_expressions
        grok { match => { "l_code" => "(?<category_code_l2>[0-9]{1,5})" } }

        mutate {
            rename  => { "l_code" => "category_code" }
            replace => { "category_code_l2" => "%{category_code_l2}00000" }
        }
    }

    if [geolat] and [geolon] {
        mutate {
            add_field => {
                "geo_location" => "%{geolat},%{geolon}"
            }
        }
    }

    mutate {
        remove_field => [ "message", "host", "path", "@version", "@timestamp", "user", "c_host", "tophost", "para", "l_code", "referer_url", "cooid", "recomdf", "country", "u_agent", "browser", "shbutton", "rating", "geolon", "geolat", "webnumber", "optobj", "area", "client_ip" ]
    }


    #-- check $uid and $guid
    if [ven_guid] =~ /\S+/ and [uid] =~ /\S+/ {
        clone {
            clones => ["OnlineUserAlign"]
        }

        if [type] == "OnlineUserAlign" {
            mutate {
                replace => { "[@metadata][type]" => "OnlineUserAlign" }
                remove_field => [ "type" ]
                remove_field => [ "message", "host", "path", "@version", "@timestamp", "user", "action", "c_host", "tophost", "para", "l_code", "referer_url", "cooid", "recomdf", "country", "u_agent", "browser", "shbutton", "rating", "geolon", "geolat", "webnumber", "optobj", "area", "page_type", "gid", "ven_session", "client_ip", "uri", "geo_location", "category_code", "category_code_l2" ]
            }
        }
    }

    if [@metadata][type] == "OnlinePref" {
        #-- drop if none of [category_code]
        if [action] == "pageload" and  [category_code] !~ /\S+/ {
            drop {}
        }
    }
    
    if "_grokparsefailure" in [tags] {
        drop {}
    }

}


output {
    if [@metadata][type] == "OnlinePref" {
        elasticsearch {
            hosts => ["es-node-01:9200"] 
            index => "%{[@metadata][code_name]}_opp_%{[@metadata][date]}"
            document_type => "OnlinePref"
        }
    }

    if [@metadata][type] == "OnlineUserAlign" {
        elasticsearch { 
            hosts => ["es-node-01:9200"] 
            index => "%{[@metadata][code_name]}_oua_%{[@metadata][date]}"
            document_type => "OnlineUserAlign"
        }
    }

#    stdout { 
#        codec => rubydebug { metadata => true }
#    }

}
