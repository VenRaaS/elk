input {
	file {
		path => "/tmp/data*"
		start_position => "beginning"
		sincedb_path => "/tmp/sincedb_weblog_daily"
		codec => "json"
	}
}


filter {
	#-- action json content
	if [pageload] {

		#-- remove Backslash
		mutate { gsub => ["pageload", "[\\]", ""] }

		#-- extract action content from json array
		json { source => "[pageload][0]" }
	} else if [unfavadd] {
		mutate { gsub => ["unfavadd", "[\\]", ""] }
		json { source => "[unfavadd][0]" }
	} else if [checkout] {
		mutate { gsub => ["checkout", "[\\]", ""] }
		json { source => "[checkout][0]" }
	} else {
		drop {}
	}
	
	mutate {
		add_field => { "[@metadata][type]" => "OnlinePref" }
	}

	#-- code_name
	if [code_name] {
		mutate {
		    add_field => { "[@metadata][code_name]" => "%{[code_name][0]}" }
		}
	}

	#-- referrer_host
	grok {
		match => { "referrer" => "%{URIPATH:ref_path}" }
	}
	grok {
		match => { "ref_path" => "%{IPORHOST:referrer_host}" }
		remove_field => [ "ref_path" ]
	}

	#-- uri
	mutate {
		replace => { "uri" => "%{tophost}%{uri}" }
	}

	#-- client_ip
	mutate {
		#-- replace fieldname [client_ip][0] to [client] with add_field and remove_field
		gsub => [ "[client_ip][0]", "[ ]*", "" ]
		add_field => { "client" => "%{[client_ip][0]}" }
	}
	mutate {
		rename => { "client" => "client_ip" }
		split => { "client_ip" => "," }
	}

	mutate {
		rename => { "categ_code" => "category_code" }
		rename => { "categ_le" => "category_code_le" }
	}
	
	#-- set [insert_dt] as [api_logtime]
    ruby {
        #-- extract datetime to second precision only
        code => 'event.set("[insert_dt]", event.get("[api_logtime][0]")[0..18])'
    }
    grok {
		match => { "[insert_dt]" => "%{YEAR:yyyy}-%{MONTHNUM:MM}-%{MONTHDAY:dd}T" }
		add_field => { "[@metadata][date]" => "%{yyyy}%{MM}%{dd}" }
	}
	mutate {
        remove_field => [ "yyyy", "MM", "dd" ]
    }


	#-- remove useless fields
	mutate {	 
		remove_field => [ "pageload", "cartload", "checkout", "po" , "rep" , "favadd" , "favrm" , "cartadd" , "cartrm" , "login" , "logout" ]
		remove_field => [ "agent", "request_method", "api_loghost", "api_logtime" ]
		remove_field => [ "autosend", "from_rec", "web", "ver", "client_tzo", "client_utc", "now_rec", "para" ]
		remove_field => [ "referrer", "client_host", "tophost", "client_ip" ]
		remove_field => [ "message", "host", "path", "@version", "@timestamp" ]
	}
	
	if [ven_guid] =~ /\S+/ and [uid] =~ /\S+/ {
		clone {
            clones => ["OnlineUserAlign"]
		}

		if [type] == "OnlineUserAlign" {
			mutate {
				replace => { "[@metadata][type]" => "OnlineUserAlign" }

				remove_field => [ "type" ]
				remove_field => [ "action", "ven_session", "cc_guid", "cc_session", "gid", "category_code", "category_code_le", "page_type", "uri", "referrer_host", "geo_location", "insert_dt" ]
				remove_field => [ "@version", "@timestamp" ]
			}
		}
	}

	mutate {
		remove_field => [ "code_name", "token" ]
	}
}


output {
	if [@metadata][type] == "OnlinePref" {
		elasticsearch {
			hosts => ["elk-v568:9200"]
			index => "%{[@metadata][code_name]}_opp_%{[@metadata][date]}"
			document_type => "OnlinePref"
		}
	}

	if [@metadata][type] == "OnlineUserAlign" {
		elasticsearch {
			hosts => ["elk-v568:9200"]
			index => "%{[@metadata][code_name]}_oua_%{[@metadata][date]}"
			document_type => "OnlineUserAlign"
		}
	}


    stdout { 
            codec => rubydebug { metadata => true }
##            codec => json 
    }

#	file {
#		path => "/tmp/weblog.lgs.out"
#	}

}
